= My Dot Files

These are config files to set up a system the way I like it.

(With thanks to Ryan Bates on the base project and the yoinked snippets).

I mostly use Textmate and many, many little bash scripts to help me on the way.

== Installation

  git clone git://github.com/tommeier/dotfiles ~/.dotfiles
  cd ~/.dotfiles
  rake install


== Environment

I am running on Mac OS X, but it will likely work on Linux as well with
minor fiddling.

== Features

I place projects in 2 locations that fallback, the script has been hacked to auto complete for both.
Run any project in those directories with:

  p some_proje<tab>

There is also an "h" command which behaves similar, but acts on the
home path.

  h doc<tab>

Tab completion is also added to rake and cap commands:

  rake db:mi<tab>
  cap de<tab>

To speed things up, the results are cached in local .rake_tasks~ and
.cap_tasks~. It is smart enough to expire the cache automatically in
most cases, but you can simply remove the files to flush the cache.

There are a few key bindings set. Many of these require option to be
set as the meta key. Option-left/right arrow will move cursor by word,
and control-left/right will move to beginning and end of line.
Control-option-N will open a new tab with the current directory under
Mac OS X Terminal.

If you're using git, you'll notice the current branch name shows up in
the prompt while in a git repository.

If you're using Rails, you'll find some handy aliases (below). You can
also use show_log and hide_log in script/console to show the log inline.

  ss       # script/server
  sc       # script/console
  sg       # script/generate
  a        # autotest
  tlog     # tail -f log/development.log
  rst      # touch tmp/restart.txt
  migrate  # rake db:migrate db:test:clone
  scaffold # script/generate nifty_scaffold

If there are some shell configuration settings which you want secure or
specific to one system, place it into a ~/.localrc file. This will be
loaded automatically if it exists.

There are several features enabled in Ruby's irb including history and
completion. Many convenience methods are added as well such as "ri"
which can be used to get inline documentation in IRB. See irbrc and
railsrc files for details.
